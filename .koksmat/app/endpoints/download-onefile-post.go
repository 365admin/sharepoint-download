// -------------------------------------------------------------------
// Generated by 365admin-publish/api/20 makeschema.ps1
// -------------------------------------------------------------------
/*
---
title: Download Graph
---
*/
package endpoints

import (
	"context"
	"encoding/json"
	"errors"
	"log"
	"os"
	"path"

	"github.com/swaggest/usecase"

	"github.com/365admin/sharepoint-download/execution"
	"github.com/365admin/sharepoint-download/schemas"
	"github.com/365admin/sharepoint-download/utils"
)

func DownloadOnefilePost() usecase.Interactor {
	type Request struct {
		Body schemas.DownloadRequest `json:"body" binding:"required"`
	}
	u := usecase.NewInteractor(func(ctx context.Context, input Request, output *schemas.DownloadResponse) error {
		body, inputErr := json.Marshal(input.Body)
		if inputErr != nil {
			log.Println(inputErr)
			return errors.New("error 100: cannot download")
		}
		inputFilePath := path.Join(utils.WorkDir("sharepoint-download"), "download-request.json")
		log.Println("DownloadOnefilePost: inputFilePath", inputFilePath)
		inputErr = os.WriteFile(inputFilePath, body, 0644)
		if inputErr != nil {
			log.Println(inputErr)
			return errors.New("error 101: cannot download")
		}

		_, err := execution.ExecutePowerShell("john", "*", "sharepoint-download", "20-download", "download-graph.ps1", "")
		if err != nil {
			log.Println(err)
			return errors.New("error 102: cannot download")
		}

		resultingFile := path.Join(utils.WorkDir("sharepoint-download"), "download-response.json")
		data, err := os.ReadFile(resultingFile)
		if err != nil {
			log.Println(err)
			return errors.New("error 103: cannot download")
		}
		resultObject := schemas.DownloadResponse{}
		err = json.Unmarshal(data, &resultObject)
		*output = resultObject
		return err

	})
	u.SetTitle("Download Graph")
	// u.SetExpectedErrors(status.InvalidArgument)
	u.SetTags("Download")
	return u
}
